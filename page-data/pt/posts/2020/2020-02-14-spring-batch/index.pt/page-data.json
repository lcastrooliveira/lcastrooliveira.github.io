{
    "componentChunkName": "component---src-templates-post-page-template-js",
    "path": "/pt/posts/2020/2020-02-14-spring-batch/index.pt/",
    "result": {"data":{"mdx":{"id":"e728b2ac-51ba-513f-a610-d2051acbc1d2","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"date\": \"2020-02-14T13:32:04.000Z\",\n  \"title\": \"Usando Spring Batch para fazer ETL de informa√ßoes financeiras\",\n  \"subtitle\": \"Como fazer um ELT bem simples para converter dados CSV para um banco usando Spring Batch\",\n  \"description\": \"Como fazer um ELT bem simples para converter dados CSV para um banco usando Spring Batch\",\n  \"tags\": [\"Java\", \"Spring Framework\", \"Spring Batch\", \"ETL\"],\n  \"published\": true,\n  \"language\": \"pt\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Comecei a brincar com Spring Batch e ETLs e isso foi o que consegui fazer (at\\xE9 ent\\xE3o)\\u2026.\"), mdx(\"p\", null, \"O ano de 2019 foi bem intenso pra mim pois tive a oportunidade de aprender muita coisa sobre desenvolvimento Web com Java Spring e cultura DevOps no geral. Mas a\\xED \\xE9 o que dizem: Quanto mais voc\\xEA estuda algo mais voc\\xEA percebe o qu\\xE3o ainda tem que aprender. Ent\\xE3o l\\xE1 estava eu procurando uma forma de aprofundar meus conhecimentos do ecossistema Spring, quando fiquei curioso com o projeto Spring Batch.\"), mdx(\"p\", null, \"Pra quem n\\xE3o sabe Spring Batch \\xE9 um subprojeto do framework Spring destinado a fazer processamentos em lote. Este projeto possui diversas facilidades inclu\\xEDdas na sua toolset que permite a execu\\xE7\\xE3o sistem\\xE1tica, determin\\xEDstica e rastre\\xE1vel de trabalhos executados em batches ou lotes. Um exemplo muito bacana de aplica\\xE7\\xE3o, \\xE9 o seu uso para processar um streaming de dados tais como uma planilha ou um banco de dados. E \\xE9 justamente um exemplo assim que eu vou mostrar aqui inaugurando o meu primeiro artigo for real do meu blog =D\"), mdx(\"p\", null, \"Na minha busca por um caso de uso bacana para entender um pouco mais o Spring Batch, e aproveitando que ano passado estava inserido no Grupo de Estudos em Ci\\xEAncia de Dados, um projeto de extens\\xE3o da Unila que voc\\xEA pode conferir mais clicando neste \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://medialabfoz.com/gecd/\"\n  }, \"link\"), \", me deparei com o conceito de ETL.\"), mdx(\"h2\", null, \"ELT (TL;DR)\"), mdx(\"p\", null, \"Um ETL \\xE9 uma sigla inglesa que significa Extract Transform e Load (Extrair, Transformar e \\u201CCarregar\\u201D). A id\\xE9ia em si \\xE9 muito simples e consiste em opera\\xE7\\xF5es que envolvem grande volumes de dados compostas em basicamente em tr\\xEAs fases: extra\\xE7\\xE3o, transforma\\xE7\\xE3o e carregamento (ou armazenamento). \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://pt.wikipedia.org/wiki/Extract,_transform,_load\"\n  }, \"Defini\\xE7\\xE3o completinha na Wikip\\xE9dia\"), \".\"), mdx(\"p\", null, \"Seu uso \\xE9 muito comum quando se quer transferir um ou at\\xE9 mesmo v\\xE1rios dados de um conjunto de armazenamento para o outro. Sendo que entre origem e destino \\xE9 poss\\xEDvel fazer transforma\\xE7\\xF5es nos dados tais como agrega\\xE7\\xE3o, formata\\xE7\\xE3o e entre outros.\"), mdx(\"h2\", null, \"Descri\\xE7\\xE3o do problema que eu fui ca\\xE7ar\"), mdx(\"p\", null, \"Com este conceito em mente, precisava de um conjunto de dados para come\\xE7ar. Como eu me amarro em aprender mais sobre produtos financeiros, tais como renda fixa, a\\xE7\\xF5es e fundos imobili\\xE1rios fui procurar alguma coisa que envolvesse esses tipos de dados. Descobri que a CVM (Comiss\\xE3o de Valores Imobili\\xE1rios) possui um \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"http://dados.cvm.gov.br/\"\n  }, \"portal de dados abertos\"), \" onde \\xE9 poss\\xEDvel baixar as mais diversas planilhas relacionadas a fundos de investimento tais como informe di\\xE1rio, informa\\xE7\\xF5es cadastrais e entre outros.\"), mdx(\"p\", null, \"Dentre os conjuntos de dados fornecidos pela CVM existe um denominado \\u201CInforme di\\xE1rio\\u201D que segundo a pr\\xF3pria CVM tem um demonstrativo com informa\\xE7\\xF5es como:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Valor total da carteira do fundo\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Patrim\\xF4nio l\\xEDquido\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Valor da cota\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Capta\\xE7\\xF5es realizadas no dia\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Resgates pagos no dia\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"N\\xFAmero de cotistas\")), mdx(\"p\", null, \"Baixei uma planilha de um dia aleat\\xF3rio e boom! Um csv com mais de 200.000 linhas de dados estruturados. Perfeito para arrega\\xE7ar as mangas e come\\xE7ar a brincar.\"), mdx(\"p\", null, \"Cada linha do CSV representa informa\\xE7\\xF5es de um fundo em determinado dia. Dentre as dezenas de colunas disponibilizadas na planilha, elegi algumas para utilizar na minha solu\\xE7\\xE3o de ETL, s\\xE3o elas:\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"CNPJ da empresa emissora\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Data de Refer\\xEAncia\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Valor Total\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Valor da Quota\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Patrim\\xF4nio l\\xEDquido\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Capta\\xE7\\xE3o no dia (total de dep\\xF3sitos)\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Resgates no dia (total de retiradas)\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"N\\xFAmero de Quotistas\")), mdx(\"p\", null, \"Como primeiro passo pensei em s\\xF3 fazer um ETL simples, ou seja carregar as informa\\xE7\\xF5es do CSV e grav\\xE1-las em um banco de dados MySQL. Para n\\xE3o ficar sem fazer nenhuma mudan\\xE7a no passo de transforma\\xE7\\xE3o, resolvi apenas remover a formata\\xE7\\xE3o do campo CNPJ, ou seja, no banco eu somente salvo os d\\xEDgitos, sem pontos ou tra\\xE7os.\"), mdx(\"p\", null, \"O rascunho de guardanapo da minha solu\\xE7\\xE3o ficou assim:\"), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://i.imgur.com/4ID6lG9.png\"\n  }, mdx(\"img\", {\n    parentName: \"a\",\n    \"src\": \"https://i.imgur.com/4ID6lG9.png\",\n    \"alt\": \"ETLSchema\",\n    \"title\": \"ETL Schema\"\n  }))), mdx(\"p\", null, \"A ideia \\xE9, ler o arquivo CSV, fazer um ETL usando Spring Batch, gravar as informa\\xE7\\xF5es em uma tabela no banco de dados usando o Spring Data, e finamente utilizar o Spring Web para disponibilizar as informa\\xE7\\xF5es em formato JSON atrav\\xE9s de uma API.\"), mdx(\"p\", null, \"O esquema de dados da entidade que eu criei no banco ficou assim:\"), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://i.imgur.com/Wp41TkJ.png\"\n  }, mdx(\"img\", {\n    parentName: \"a\",\n    \"src\": \"https://i.imgur.com/Wp41TkJ.png\",\n    \"alt\": \"DailyInform\",\n    \"title\": \"Daily Inform\"\n  }))), mdx(\"p\", null, \"Apresentados a ideia e uma arquitetura geral do brincadeira, bora escrever um pouco de c\\xF3digo!\"), mdx(\"h2\", null, \"Passo 1, fazendo meu \\u201CHello World\\u201D com Spring Batch\"), mdx(\"p\", null, \"Para utilizar o Spring Batch primeiro voc\\xEA precisa colocar as depend\\xEAncias dele no seu projeto. Voc\\xEA pode come\\xE7ar criando um projeto no Spring Initializr selecionando as seguintes depend\\xEAncias:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Spring boot starter data jpa: (para fazer conex\\xE3o ao banco de dados)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Spring boot starter web: (para criar a camada web respons\\xE1vel por expor os dados vai uma API REST com JSON).\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"mySql-connector-java: Para este tutorial eu optei por utilizar o MySQL, mas qualquer outro DB relacional funciona.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"spring-boot-starter-batch: A estrelinha do projeto, cont\\xE9m as classes necess\\xE1rias para utilizar o Spring Batch.\")), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://i.imgur.com/SwwyBT1.png\"\n  }, mdx(\"img\", {\n    parentName: \"a\",\n    \"src\": \"https://i.imgur.com/SwwyBT1.png\",\n    \"alt\": \"SpringInitializr\",\n    \"title\": \"Spring Initializr\"\n  }))), mdx(\"p\", null, \"Uma vez baixado o zip \\xE9 s\\xF3 descompactar, abrir na sua IDE favorita e come\\xE7ar a codar!\"), mdx(\"p\", null, \"Primeiramente \\xE9 necess\\xE1rio criar a Entidade DailyInform, que ser\\xE1 o objeto final que as informa\\xE7\\xF5es de planilha ser\\xE3o convertidas e gravadas no Banco:\"), mdx(\"deckgo-highlight-code\", {\n    \"language\": \"java\"\n  }, \"\\n          \", mdx(\"code\", {\n    parentName: \"deckgo-highlight-code\",\n    \"slot\": \"code\"\n  }, \"import javax.persistence.*;\\nimport javax.validation.constraints.NotNull;\\nimport java.io.Serializable;\\nimport java.math.BigDecimal;\\nimport java.time.LocalDate;\\n\\n@Entity\\n@Table(indexes = {\\n       @Index(columnList = \\\"cnpj\\\", name = \\\"cnpj_hidx\\\"),\\n       @Index(columnList = \\\"referenceDate\\\", name = \\\"reference_date_hidx\\\")},\\n       uniqueConstraints = @UniqueConstraint(columnNames = { \\\"cnpj\\\", \\\"referenceDate\\\" }))\\npublic class DailyInform implements Serializable {\\n\\n   @Id\\n   @GeneratedValue(strategy = GenerationType.AUTO)\\n   private Long id;\\n\\n   @NotNull\\n   @CNPJ\\n   @Column(nullable = false)\\n   private String cnpj;\\n\\n   @NotNull\\n   @Column(nullable = false)\\n   private LocalDate referenceDate;\\n\\n   @NotNull\\n   @Column(nullable = false)\\n   private BigDecimal totalValue;\\n\\n   @NotNull\\n   @Column(nullable = false)\\n   private BigDecimal quotaValue;\\n\\n   @NotNull\\n   @Column(nullable = false)\\n   private BigDecimal netWorth;\\n\\n   @NotNull\\n   @Column(nullable = false)\\n   private BigDecimal totalDeposits;\\n\\n   @NotNull\\n   @Column(nullable = false)\\n   private BigDecimal totalWithdrawals;\\n\\n   @NotNull\\n   @Column(nullable = false)\\n   private Long numberOfQuotaHolders;\\n\\n   public DailyInform() {};\\n\\n   public DailyInform(String cnpj, LocalDate referenceDate,\\n                      BigDecimal totalValue, BigDecimal quotaValue,\\n                      BigDecimal netWorth, BigDecimal totalDeposits,\\n                      BigDecimal totalWithdrawals, Long numberOfQuotaHolders) {\\n       this.cnpj = cnpj;\\n       this.referenceDate = referenceDate;\\n       this.totalValue = totalValue;\\n       this.quotaValue = quotaValue;\\n       this.netWorth = netWorth;\\n       this.totalDeposits = totalDeposits;\\n       this.totalWithdrawals = totalWithdrawals;\\n       this.numberOfQuotaHolders = numberOfQuotaHolders;\\n   }\\n\\n   @Override\\n   public String toString() {\\n       return \\\"DailyInform{\\\" +\\n               \\\"cnpj='\\\" + cnpj + '\\\\'' +\\n               \\\", referenceDate=\\\" + referenceDate +\\n               \\\", quotaValue=\\\" + quotaValue +\\n               '}';\\n   }\\n   // .... Getters/Setters\\n}\"), \"\\n        \"), mdx(\"p\", null, \"Observe que \\xE9 uma Entidade JPA bem simples s\\xF3 para ilustrar os conceitos. Tamb\\xE9m adicionei alguns \\xEDndices para melhorar o desempenho de queries de busca.\"), mdx(\"p\", null, \"Os processamentos em lote no Spring s\\xE3o executados atrav\\xE9s de um Job. Um job \\xE9 composto de Steps que definem passos sucessivos de leitura, transforma\\xE7\\xE3o e escrita (para este tutorial faremos um Job com um \\xFAnico Step). O Step basicamente tem tr\\xEAs elementos:\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Um reader: Define o que e como vai ser lido. Nesta fase que se define de onde vir\\xE3o os dados (no caso a planilha), e quais colunas ser\\xE3o digeridas.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Um processor: Define uma opera\\xE7\\xE3o de transforma\\xE7\\xE3o que o dado lido ter\\xE1 que sofrer at\\xE9 estar pronto para a escrita. Recebe um objeto de entrada e retorna outro objeto de sa\\xEDda.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Um writer: Define onde os dados rec\\xE9m processados ser\\xE3o escritos, neste artigo iremos utilizar um Repository bean para escrever as informa\\xE7\\xF5es na tabela do banco de dados.\")), mdx(\"p\", null, \"Para utilizar um Job no SpringBatch \\xE9 necess\\xE1rio configur\\xE1-lo. Segue um exemplo de um trecho do arquivo @Configuration(lembrando que o c\\xF3digo completo deste tutorial encontra-se no meu GitHub:\"), mdx(\"deckgo-highlight-code\", {\n    \"language\": \"java\"\n  }, \"\\n          \", mdx(\"code\", {\n    parentName: \"deckgo-highlight-code\",\n    \"slot\": \"code\"\n  }, \"@Configuration\\n@EnableBatchProcessing\\npublic class SpringBatchConfiguration {\\n\\n   @Bean\\n   public Job job(JobBuilderFactory jobBuilderFactory,\\n                  StepBuilderFactory stepBuilderFactory,\\n                  ItemReader<DailyInform> itemReader,\\n                  ItemProcessor<DailyInform, DailyInform> itemProcessor,\\n                  ItemWriter<DailyInform> itemWriter) {\\n\\n       Step step = stepBuilderFactory.get(\\\"ETL-file-load\\\")\\n               .<DailyInform, DailyInform>chunk(1000)\\n               .reader(itemReader)\\n              .processor(itemProcessor)\\n               .writer(itemWriter)\\n               .build();\\n\\n       return jobBuilderFactory.get(\\\"ETL-Load\\\")\\n                               .incrementer(new RunIdIncrementer())\\n                               .start(step)\\n                               .build();\\n   }\\n   // mais beans vir\\xE3o\\n}\\n\"), \"\\n        \"), mdx(\"p\", null, \"Como pode ser visto na linha 25, \\xE9 necess\\xE1rio utilizar a annotation \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"@EnableBatchProcessing\"), \" para habilitar o Spring Batch no projeto. O Job \\xE9 exposto para aplica\\xE7\\xE3o atrav\\xE9s de um bean, sendo gerenciado pelo Spring Container. O m\\xE9todo \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"job\"), \" recebe cinco par\\xE2metros: \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"jobBuilderFactory\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"stepBuilderFactory\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"itemReader\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"itemProcessor\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"itemWriter\"), \". As factories s\\xE3o injetadas pelo pr\\xF3prio Spring, ao passo que cabe a n\\xF3s definir os outros par\\xE2metros atrav\\xE9s de Beans na aplica\\xE7\\xE3o. Uma vez definidos, o pr\\xF3prio Spring os injeta no m\\xE9todo e cria o \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Job\"), \". Observe que os tipos do reader, processor e writer s\\xE3o tipados de acordo com a entidade modelada \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"DailyInform\"), \". \\xC9 perfeitamente poss\\xEDvel modelar um fluxo onde a leitura \\xE9 de um tipo, convertido a outro no processamento e depois gravado no est\\xE1gio de escrita. Mas para manter este tutorial mais simples vamos seguir com a id\\xE9ia de manter o mesmo tipo durante todo o ciclo.\"), mdx(\"p\", null, \"Gra\\xE7as a inje\\xE7\\xE3o de depend\\xEAncia, o Spring consegue montar o Job utilizando um reader, processor e writer que tamb\\xE9m s\\xE3o Beans na aplica\\xE7\\xE3o. Vou explicar como eles s\\xE3o criados e o detalhamento de cada um deles nas sess\\xF5es a seguir.\"), mdx(\"h2\", null, \"Passo 2 - Criando o bean de leitura\"), mdx(\"p\", null, \"Podemos criar um bean de leitura a partir da classe \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"FlatFileItemReader<T>\"), \", uma classe que implementa indiretamente a interface \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ItemReader<T>\"), \". A facilidade de usar esta classe \\xE9 que ela foi projetada para cen\\xE1rios de leituras em arquivos linha a linha (perfeito para o nosso exemplo de CSV). A sua configura\\xE7\\xE3o \\xE9 relativamente simples, no entanto ela exige a cria\\xE7\\xE3o de outro bean auxiliar. Segue um exemplo da implementa\\xE7\\xE3o:\"), mdx(\"deckgo-highlight-code\", {\n    \"language\": \"java\"\n  }, \"\\n          \", mdx(\"code\", {\n    parentName: \"deckgo-highlight-code\",\n    \"slot\": \"code\"\n  }, \"@Bean\\npublic FlatFileItemReader<DailyInform> fileItemReader(@Value(\\\"${input}\\\") Resource resource) {\\n   FlatFileItemReader<DailyInform> fileItemReader = new FlatFileItemReader<>();\\n   fileItemReader.setResource(resource);\\n   fileItemReader.setEncoding(\\\"ISO-8859-3\\\");\\n   fileItemReader.setName(\\\"CSV-Reader\\\");\\n   fileItemReader.setLinesToSkip(1);\\n   fileItemReader.setLineMapper(lineMapper());\\n   return fileItemReader;\\n}\"), \"\\n        \"), mdx(\"p\", null, \"Em que:\"), mdx(\"p\", null, \"Entrada: Resource (uma refer\\xEAncia ao arquivo .csv), aqui eu setei o path em uma vari\\xE1vel de ambiente \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"${input}\"), \" por conveni\\xEAncia.\"), mdx(\"p\", null, \"Sa\\xEDda: Um objeto do tipo \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"FlatFileItemReader<DailyInform>\"), \" onde eu configuro:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"O recurso que ser\\xE1 lido.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"O encoding do arquivo, no caso eu descobri que a planilha baixada n\\xE3o est\\xE1 em UTF-8, logo eu precisei informar o encoding correto para n\\xE3o haver falhas de leitura de caracteres especiais tais como \\xE0 \\xF3 \\xE3 (Portugu\\xEAs n\\xE9 ?).\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Nome deste bean: provavelmente utilizado pelo Spring para uma indexa\\xE7\\xE3o interna deste reader.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Linhas para pular: Coloquei o valor 1 para pular o cabe\\xE7alho e ir direto para os dados.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"O \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"LineMapper\"), \": O bean auxiliar necess\\xE1rio para configurar as pol\\xEDticas de leitura. Sua cria\\xE7\\xE3o ser\\xE1 detalhada a seguir.\")), mdx(\"h3\", null, \"Criando o LineMapper\"), mdx(\"p\", null, \"O \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"LineMapper\"), \" \\xE9 o bean que basicamente define qual vai ser a l\\xF3gica de leitura tais como: Qual caractere \\xE9 o delimitador de colunas, qual \\xE9 o nome das colunas e como converter a linha lida em objeto. Sua constru\\xE7\\xE3o se d\\xE1 da seguinte forma:\"), mdx(\"deckgo-highlight-code\", {\n    \"language\": \"java\"\n  }, \"\\n          \", mdx(\"code\", {\n    parentName: \"deckgo-highlight-code\",\n    \"slot\": \"code\"\n  }, \"@Bean\\npublic LineMapper<DailyInform> lineMapper() {\\n   DefaultLineMapper<DailyInform> defaultLineMapper = new DefaultLineMapper<>();\\n   DelimitedLineTokenizer lineTokenizer = new DelimitedLineTokenizer();\\n\\n   lineTokenizer.setDelimiter(\\\";\\\");\\n\\n   lineTokenizer.setNames(\\\"CNPJ_FUNDO\\\",\\n                          \\\"DT_COMPTC\\\",\\n                          \\\"VL_TOTAL\\\",\\n                          \\\"VL_QUOTA\\\",\\n                          \\\"VL_PATRIM_LIQ\\\",\\n                          \\\"CAPTC_DIA\\\",\\n                          \\\"RESG_DIA\\\",\\n                          \\\"NR_COTST\\\");\\n   lineTokenizer.setStrict(false);\\n\\n   DailyInformFieldSetMapper dailyInformFieldSetMapper = new DailyInformFieldSetMapper();\\n\\n   defaultLineMapper.setLineTokenizer(lineTokenizer);\\n   defaultLineMapper.setFieldSetMapper(dailyInformFieldSetMapper);\\n\\n   return defaultLineMapper;\\n}\\n\"), \"\\n        \"), mdx(\"p\", null, \"O objeto retornado por este m\\xE9todo \\xE9 uma inst\\xE2ncia da classe \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"DefaultLineMapper\"), \", que implementa a interface \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"LineMapper\"), \", onde \\xE9 configurado:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"O delimitador: no caso do CSV da CVM foi utilizado o caractere \\u2018;\\u2019 para separar os dados de cada coluna\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Define os tokens (ou os nomes) de cada coluna que ser\\xE1 lida, bem como a quantas ser\\xE3o processadas. Mais tarde estes nomes ser\\xE3o utilizados no bean que coloca as informa\\xE7\\xF5es de cada linha em um objeto POJO DailyInform.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Setar leitura estrita: Caso seja true toda linha lida deve ter o n\\xFAmero correto de colunas, se for marcada como false o SpringBatch aceita a leitura de linhas que n\\xE3o possui o mesmo n\\xFAmero de colunas definidos nos tokens. Caso haja menos colunas, os valores que faltam ser\\xE3o preenchidos com empty(vazio), caso haja mais colunas elas ser\\xE3o simplesmente ignoradas.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"O \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"fieldsetmapper\"), \": Bean que define como os dados lidos das linhas ser\\xE3o convertidos em um POJO. Neste caso eu criei uma classe chamada DailyInformFieldSetMapper que faz este trabalho.\")), mdx(\"h3\", null, \"O DailyInformFieldSetMapper (pois aqui n\\xE3o existe m\\xE1gica)\"), mdx(\"p\", null, \"Esta classe implementa a interface \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"FieldSetMapper<T>\"), \", que por contrato obriga a implementar o m\\xE9todo \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<T> mapFieldSet(FieldSet fieldSet)\"), \", este m\\xE9todo recebe por par\\xE2metro uma linha lida pelo \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"LineMapper\"), \" e \\xE9 nele que se implementa a l\\xF3gica de colocar os tokens definidos em atributos da classe \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"DailyInform\"), \". Esse \\xE9 o cora\\xE7\\xE3o da convers\\xE3o do dado que est\\xE1 em uma linha CSV para um objeto Java completo (por isso que eu digo que aqui n\\xE3o existe m\\xE1gica xD). A classe s\\xF3 tem o m\\xE9otodo \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"mapFieldSet\"), \" e fica desta forma:\"), mdx(\"deckgo-highlight-code\", {\n    \"language\": \"java\"\n  }, \"\\n          \", mdx(\"code\", {\n    parentName: \"deckgo-highlight-code\",\n    \"slot\": \"code\"\n  }, \"public class DailyInformFieldSetMapper implements FieldSetMapper<DailyInform> {\\n\\n   @Override\\n   public DailyInform mapFieldSet(FieldSet fieldSet) throws BindException {\\n       final DailyInform dailyInform = new DailyInform();\\n       dailyInform.setCnpj(fieldSet.readString(\\\"CNPJ_FUNDO\\\"));\\n       dailyInform.setReferenceDate(fieldSet.readDate(\\\"DT_COMPTC\\\")\\n                  .toInstant().atZone(ZoneId.systemDefault()).toLocalDate());\\n       dailyInform.setTotalValue(fieldSet.readBigDecimal(\\\"VL_TOTAL\\\"));\\n       dailyInform.setQuotaValue(fieldSet.readBigDecimal(\\\"VL_QUOTA\\\"));\\n       dailyInform.setNetWorth(fieldSet.readBigDecimal(\\\"VL_PATRIM_LIQ\\\"));\\n       dailyInform.setTotalDeposits(fieldSet.readBigDecimal(\\\"CAPTC_DIA\\\"));\\n       dailyInform.setTotalWithdrawals(fieldSet.readBigDecimal(\\\"RESG_DIA\\\"));\\n       dailyInform.setNumberOfQuotaHolders(fieldSet.readLong(\\\"NR_COTST\\\"));\\n       return dailyInform;\\n   }\\n}\\n\"), \"\\n        \"), mdx(\"p\", null, \"Feito isso, tudo est\\xE1 pronto e configurado para o passo de leitura, agora s\\xF3 falta os passos de transforma\\xE7\\xE3o e escrita, mas felizmente eles s\\xE3o bem mais simples de fazer conforme eu vou mostrar agora.\"), mdx(\"h2\", null, \"Parte 3 - Configurando o Processor\"), mdx(\"p\", null, \"A classe \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"DailyInformProcessor\"), \" \\xE9 a classe respons\\xE1vel por realizar opera\\xE7\\xF5es de transforma\\xE7\\xE3o no objeto \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"DailyInform\"), \". \\xC9 neste est\\xE1gio que pode-se fazer as mais completas opera\\xE7\\xF5es tais como aplicar c\\xE1lculos, fazer formata\\xE7\\xF5es, agregar dados e at\\xE9 mesmo converter a sa\\xEDda para um outro objeto completamente diferente. No caso deste tutorial, para ilustrar o seu uso eu utilizei este passo para formatar o valor do CNPJ das empresas ao remover pontos e tra\\xE7os. Para isso, peguei uma ajudinha na biblioteca da \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"http://stella.caelum.com.br/\"\n  }, \"Alura Stella\"), \", que cont\\xE9m diversas facilidades para manipular documentos brazucas. Al\\xE9m disso, n\\xE3o modifiquei o tipo de objeto de sa\\xEDda (entra \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"DailyInform\"), \", sai \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"DailyInform\"), \"). A classe tem implementa\\xE7\\xE3o simples e ficou da seguinte maneira:\"), mdx(\"deckgo-highlight-code\", {\n    \"language\": \"java\"\n  }, \"\\n          \", mdx(\"code\", {\n    parentName: \"deckgo-highlight-code\",\n    \"slot\": \"code\"\n  }, \"@Component\\npublic class DailyInformProcessor implements ItemProcessor<DailyInform, DailyInform> {\\n\\n   @Autowired\\n   private CNPJFormatter cnpjFormatter;\\n\\n   @Override\\n   public DailyInform process(DailyInform dailyInform) throws Exception {\\n       dailyInform.setCnpj(cnpjFormatter.unformat(dailyInform.getCnpj()));\\n       return dailyInform;\\n   }\\n}\\n\"), \"\\n        \"), mdx(\"p\", null, \"Observe que \\xE9 necess\\xE1rio implementar o m\\xE9todo \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"process\"), \" da interface \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ItemProcessor\"), \", bem auto explicativo.\"), mdx(\"p\", null, \"Por \\xFAltimo s\\xF3 faltou implementar o est\\xE1gio da escrita.\"), mdx(\"h2\", null, \"Parte 4 - Configurando a Escrita\"), mdx(\"p\", null, \"Primeiramente, vamos criar um reposit\\xF3rio para a entidade \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"DailyInform\"), \" que ser\\xE1 utilizado pelo \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Writer\"), \" para escrever os dados no DB.\"), mdx(\"deckgo-highlight-code\", {\n    \"language\": \"java\"\n  }, \"\\n          \", mdx(\"code\", {\n    parentName: \"deckgo-highlight-code\",\n    \"slot\": \"code\"\n  }, \"@Repository\\npublic interface DailyInformRepository extends JpaRepository<DailyInform, Long> {\\n   List<DailyInform> findDistinctByCnpj(String cnpj);\\n}\\n\"), \"\\n        \"), mdx(\"p\", null, \"\\xC9 um reposit\\xF3rio simples utilizando Spring Data sem muito mist\\xE9rio. S\\xF3 adicionei um m\\xE9todo para achar os informes di\\xE1rios via CNPJ pois eu criei um endpoint na camada web que traz os resultados por empresa.\"), mdx(\"p\", null, \"Feito o reposit\\xF3rio, agora \\xE9 s\\xF3 criar o \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Writer\"), \", que basicamente \\xE9 um componente Spring que implementa a inteface \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ItemWriter\"), \":\"), mdx(\"deckgo-highlight-code\", {\n    \"language\": \"java\"\n  }, \"\\n          \", mdx(\"code\", {\n    parentName: \"deckgo-highlight-code\",\n    \"slot\": \"code\"\n  }, \"@Component\\npublic class DBWriter implements ItemWriter<DailyInform> {\\n\\n   private final DailyInformRepository dailyInformRepository;\\n\\n   @Autowired\\n   public DBWriter(DailyInformRepository dailyInformRepository) {\\n       this.dailyInformRepository = dailyInformRepository;\\n   }\\n\\n   @Override\\n   public void write(List<? extends DailyInform> list) {\\n       dailyInformRepository.saveAll(list);\\n   }\\n}\\n\"), \"\\n        \"), mdx(\"p\", null, \"O \\xFAnico m\\xE9todo que o a interface imp\\xF5e implementar o \\xE9 o \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"write\"), \". Este por sua vez recebe uma lista com dados (os chunks que s\\xE3o transformados no passo anterior), que por sua vez eu mando escrever no banco utilizando o \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"DailyInformRepository\"), \", injetado aqui na classe como um atributo chamado \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"dailyInformRepository\"), \". As JpaRepositories possuem um m\\xE9todo chamado \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"saveAll\"), \" onde se passa uma collection Java que ser\\xE1 salva no banco, feito isso aquelas informa\\xE7\\xF5es s\\xE3o persistidas e nossos dados finalmente chegam ao seu destino final =D\"), mdx(\"h2\", null, \"B\\xF4nus - Camada Web\"), mdx(\"p\", null, \"Uma vez que os dados foram salvos no banco de dados, \\xE9 bem tranquilo fazer uma camada web para expor as informa\\xE7\\xF5es em formato JSON. Se voc\\xEA \\xE9 bem tradicional e quer seguir a arquitetura N-camadas, pode fazer uma Service um Controller. Os trechos de c\\xF3digo abaixo ilustram como fazer isso:\"), mdx(\"deckgo-highlight-code\", {\n    \"language\": \"java\"\n  }, \"\\n          \", mdx(\"code\", {\n    parentName: \"deckgo-highlight-code\",\n    \"slot\": \"code\"\n  }, \"@Service\\npublic class FundsService {\\n\\n   private final DailyInformRepository dailyInformRepository;\\n\\n   @Autowired\\n   public FundsService(DailyInformRepository dailyInformRepository) {\\n       this.dailyInformRepository = dailyInformRepository;\\n   }\\n\\n   @Transactional(readOnly = true)\\n   public List<DailyInform> getDailyInformByCNPJ(String cnpj) {\\n       return dailyInformRepository.findDistinctByCnpj(cnpj);\\n   }\\n}\"), \"\\n        \"), mdx(\"p\", null, \"E a controller:\"), mdx(\"deckgo-highlight-code\", {\n    \"language\": \"java\"\n  }, \"\\n          \", mdx(\"code\", {\n    parentName: \"deckgo-highlight-code\",\n    \"slot\": \"code\"\n  }, \"@RestController\\n@RequestMapping(\\\"/api/daily-informs\\\")\\npublic class FundsController {\\n\\n   private final FundsService fundsService;\\n\\n   @Autowired\\n   public FundsController(FundsService fundsService) {\\n       this.fundsService = fundsService;\\n   }\\n\\n   @GetMapping(\\\"/{cnpj}\\\")\\n   public ResponseEntity<List<DailyInform>> all(@PathVariable(\\\"cnpj\\\") String cnpj) {\\n       return ResponseEntity.of(Optional.of(fundsService.getDailyInformByCNPJ(cnpj)));\\n   }\\n}\\n\"), \"\\n        \"), mdx(\"p\", null, \"Sobre estes dois componentes tenho as seguintes considera\\xE7\\xF5es:\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Repare que eu injeto o reposit\\xF3rio no servi\\xE7o, e o servi\\xE7o na controller. Seguindo os preceitos de arquitetura em camadas e expondo a camada de dados somente via servi\\xE7os.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Em \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"FundsService\"), \" eu coloquei a annotation \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"@Transaction\"), \" com o par\\xE2metro readonly para true, desta forma eu informo para o Spring abrir um contexto transacional deste m\\xE9todo e que n\\xE3o vou fazer opera\\xE7\\xF5es de escrita e remo\\xE7\\xE3o no banco de dados, unindo controle transacional com um ganho de performance.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Na controller resolvi utilizar o CNPJ como um \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"PathParam\"), \", mas existem outras formas que isso pode ser feito (atrav\\xE9s de uma queryParam obrigat\\xF3ria por exemplo).\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Por fim eu injetei todos os componentes atrav\\xE9s de construtores de classe, gosto de fazer assim pois consigo declarar minhas depend\\xEAncias como final, deixando os atributos da classe mais imut\\xE1veis.\")), mdx(\"h2\", null, \"Botanto para Rodar!\"), mdx(\"p\", null, \"Feito tudo agora chegou a hora de rodar esse batch. Pra rodar o job assim que o Spring startar eu implementei a interface \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"CommandLineRunner\"), \" na classe principal que executa o job configurado. O resultado fica assim:\"), mdx(\"deckgo-highlight-code\", {\n    \"language\": \"java\"\n  }, \"\\n          \", mdx(\"code\", {\n    parentName: \"deckgo-highlight-code\",\n    \"slot\": \"code\"\n  }, \"@SpringBootApplication\\npublic class BatchProcessingApplication implements CommandLineRunner {\\n\\n   @Bean\\n   public CNPJFormatter cnpjFormatter() {\\n       return new CNPJFormatter();\\n   }\\n\\n   @Autowired\\n   private JobLauncher jobLauncher;\\n\\n   @Autowired\\n   private Job job;\\n\\n   public static void main(String[] args) {\\n       SpringApplication.run(BatchProcessingApplication.class, args);\\n   }\\n\\n   @Override\\n   public void run(String... args) throws Exception {\\n       jobLauncher.run(job, new JobParameters());\\n   }\\n}\\n\"), \"\\n        \"), mdx(\"p\", null, \"O bean \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Job\"), \" \\xE9 detectado pelo Spring e ele vem l\\xE1 do \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Job\"), \" que criamos no arquivo de configura\\xE7\\xE3o, al\\xE9m disso, precisamos de um \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"JobLaucher\"), \" que nada mais \\xE9 um do que um bean provido pelo Spring para fazer o lan\\xE7amento do seu job. Fazemos isso colocando o atributo job dentro do m\\xE9todo run do \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"jobLauncher\"), \". O par\\xE2metro \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"JobParameters\"), \" \\xE9 basicamente um Wrapper de um \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Map<String, Object>\"), \" que te permite passar par\\xE2metros para o job que vai rodar (n\\xE3o vamos utilizar isto neste tutorial, logo podemos passar uma inst\\xE2ncia vazia).\"), mdx(\"p\", null, \"Fazendo isso dando play (certifque-se que os seu banco de dados est\\xE1 de p\\xE9 e acess\\xEDvel da sua aplica\\xE7\\xE3o) podemos ver os jobs rodando\\u2026..\"), mdx(\"p\", null, \"E aqui na minha m\\xE1quina demorou mais ou menos uma hora e meia para processar as 200 mil linhas de dados.\"), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://i.imgur.com/gIyfW6P.png\"\n  }, mdx(\"img\", {\n    parentName: \"a\",\n    \"src\": \"https://i.imgur.com/gIyfW6P.png\",\n    \"alt\": \"Resultados Cmd\",\n    \"title\": \"Resultados em execu√ß√£o\"\n  }))), mdx(\"p\", null, \"O banco de dados ficou assim:\"), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://i.imgur.com/jf34chM.png\"\n  }, mdx(\"img\", {\n    parentName: \"a\",\n    \"src\": \"https://i.imgur.com/jf34chM.png\",\n    \"alt\": \"Resultados BD\",\n    \"title\": \"Resultados no banco\"\n  }))), mdx(\"p\", null, \"E este \\xE9 o resultado usando o endpoint que criei pra trazer os resultados por CNPJ, bacana n\\xE3o ? XD\"), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://i.imgur.com/XmSLgAA.png\"\n  }, mdx(\"img\", {\n    parentName: \"a\",\n    \"src\": \"https://i.imgur.com/XmSLgAA.png\",\n    \"alt\": \"Resultados JSON\",\n    \"title\": \"Resultados JSON\"\n  }))), mdx(\"h2\", null, \"Conclus\\xE3o\"), mdx(\"p\", null, \"Wow se voc\\xEA chegou at\\xE9 aqui meus parab\\xE9ns! Hehehe este tutorial ficou bem maior do que eu esperava, mas t\\xE1 \\xF3timo pra come\\xE7ar este blog com o p\\xE9 direito. \\xC9 \\xF3bvio que tem bastante coisa pra melhorar, mas agora eu tenho um norte e espero fazer pelo menos 2 artigos novos aqui por m\\xEAs.\"), mdx(\"p\", null, \"Quanto a solu\\xE7\\xE3o, bom funcionou, mas eu creio que existem bastante pontos de melhoria. Algumas coisas eu j\\xE1 descobri que d\\xE1 pra melhorar e posso falar um pouco mais em um pr\\xF3ximo artigo. Um exemplo \\xE9 que se houver alguma linha com informa\\xE7\\xF5es irregulares na planilha, todo o job para. Como isso n\\xE3o \\xE9 desej\\xE1vel, precisamos definir uma pol\\xEDtica de toler\\xE2ncia e registro de erros. Outra coisa que tamb\\xE9m \\xE9 poss\\xEDvel fazer \\xE9 paralelizar a execu\\xE7\\xE3o, como deixar o processamento de forma mais eficiente ? Ser\\xE1 que tem que fazer alguma configura\\xE7\\xE3o a mais no banco ? Fique ligado para mais conte\\xFAdo vindo por a\\xED.\"), mdx(\"p\", null, \"Espero que tenham gostado deste meu primeiro artigo e pe\\xE7o pra que voc\\xEA compartilhe com os seus colegas. Sinta-se livre para fazer observa\\xE7\\xF5es nos coment\\xE1rios, quanto mais feedback receber melhor!\"), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/lcastrooliveira/funds_daily_report\"\n  }, \"GitHub da solu\\xE7\\xE3o\")), mdx(\"h3\", null, \"Refer\\xEAncias\"), mdx(\"p\", null, \"Para mais refer\\xEAncias visite os seguintes sites. Foram deles que eu me baseei pra fazer este tutorial:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://maven.apache.org/guides/index.html\"\n  }, \"Official Apache Maven documentation\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://docs.spring.io/spring-boot/docs/2.2.1.RELEASE/maven-plugin/\"\n  }, \"Spring Boot Maven Plugin Reference Guide\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://docs.spring.io/spring-boot/docs/2.2.1.RELEASE/reference/htmlsingle/#howto-batch-applications\"\n  }, \"Spring Batch\"))), mdx(\"h3\", null, \"Guia\"), mdx(\"p\", null, \"Este guia tamb\\xE9m \\xE9 muito bom e \\xE9 do pr\\xF3prio Spring, recomendo para quem quer aprender mais.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://spring.io/guides/gs/batch-processing/\"\n  }, \"Creating a Batch Service\"))), mdx(\"p\", null, \"Abra\\xE7os;\"));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"Usando Spring Batch para fazer ETL de informa√ßoes financeiras","language":"pt","description":"Como fazer um ELT bem simples para converter dados CSV para um banco usando Spring Batch","date":"2020-02-14T13:32:04.000Z"},"fields":{"slug":"/posts/2020/2020-02-14-spring-batch/index.pt/"}}},"pageContext":{"id":"e728b2ac-51ba-513f-a610-d2051acbc1d2","locale":"pt","hrefLang":"pt-BR","originalPath":"/posts/2020/2020-02-14-spring-batch/index.pt/","dateFormat":"DD/MM/YYYY"}},
    "staticQueryHashes": ["1239077767","2744294623","2744905544","3280999885","4024388462"]}